(function (factory) {
	if (typeof define === 'function' && define.amd) {
		define(['jquery'], factory);
	} else {
		factory(jQuery);
	}
}(function ($) {
	var old = $.fn.tree;
	var Tree = function Tree(element, options) {
		this.$element = $(element);
		options.openSelector = 'tree-plus';
		options.closeSelector = 'tree-minus';
		if (options.view=='fs'){
			options.openSelector = 'fa-folder';
			options.closeSelector = 'fa-folder-open';
		}
		this.options = $.extend({}, $.fn.tree.defaults, options);
		if (this.options.itemSelect) {
			this.$element.on('click.fu.tree', '.tree-item', $.proxy(function (ev) {
				this.selectItem(ev.currentTarget);
			}, this));
		}
		var self = this;
		this.$element.on('click.fu.tree', '.tree-branch-name', $.proxy(function (ev) {
			this.toggleFolder(ev.currentTarget);
		}, this));
		if (this.options.folderSelect) {
			this.$element.off('click.fu.tree', '.tree-branch-name');
			this.$element.on('click.fu.tree', '.'+self.options.openSelector, $.proxy(function (ev) {
				this.toggleFolder($(ev.currentTarget).parent());
				return false;
			}, this));			
			this.$element.on('click.fu.tree',  '.'+self.options.closeSelector, $.proxy(function (ev) {
				this.toggleFolder($(ev.currentTarget).parent());
				return false;
			}, this));
			this.$element.on('click.fu.tree', '.tree-branch-name', $.proxy(function (ev) {
				this.selectFolder($(ev.currentTarget));
			}, this));
		}
		this.render();
	};
	Tree.prototype = {
		constructor: Tree,
		destroy: function destroy() {
			this.$element.find("li:not([data-template])").remove();
			this.$element.remove();
			return this.$element[0].outerHTML;
		},
		render: function render() {
			this.populate(this.$element);
		},
		populate: function populate($el) {
			var self = this;
			var $parent = ($el.hasClass('tree')) ? $el : $el.parent();
			var loader = $parent.find('.tree-loader:eq(0)');
			var treeData = $parent.data();
			loader.removeClass('hide');
			this.options.dataSource(treeData ? treeData : {}, function (items) {
				console.log("ITEMS",items)
				loader.addClass('hide');
				$.each(items.data, function (index, value) {
					var $entity;
					if (value.type === 'folder') {
						$entity = self.$element.find('[data-template=treebranch]:eq(0)').clone().removeClass('hide').removeData('template');
						$entity.data(value);
						$entity.find('.tree-branch-name > .tree-label').html(value.text || value.name);
						$entity.attr(self.id,value[self.id]);
					} else if (value.type === 'item') {
						$entity = self.$element.find('[data-template=treeitem]:eq(0)').clone().removeClass('hide').removeData('template');
						$entity.find('.tree-item-name > .tree-label').html(value.text || value.name);
						$entity.data(value);
						$entity.attr(self.branchId,value[self.branchId]);
					}
					var attr = value.attr || value.dataAttributes || [];
					$.each(attr, function (key, value) {
						switch (key) {
							case 'cssClass':
							case 'class':
							case 'className':
								$entity.addClass(value);
								break;
							case 'data-icon':
								$entity.find('.icon-item').removeClass().addClass('icon-item ' + value);
								$entity.attr(key, value);
								break;
							case 'id':
								$entity.attr(key, value);
								$entity.attr('aria-labelledby', value + '-label');
								$entity.find('.tree-branch-name > .tree-label').attr('id', value + '-label');
								break;
							default:
								$entity.attr(key, value);
								break;
						}
					});
					if ($el.hasClass('tree-branch-header')) {
						$parent.find('.tree-branch-children:eq(0)').append($entity);
					} else {
						$el.append($entity);
					}
				});
				self.$element.trigger('loaded.fu.tree', $parent);
			});
		},
		selectItem: function selectItem(el) {
			if (!this.options.itemSelect) return;
			var $el = $(el);
			var selData = $el.data();
			var $all = this.$element.find('.tree-selected');
			var data = [];
			var $icon = $el.find('.icon-item');
			if (this.options.multiSelect) {
				$.each($all, function (index, value) {
					var $val = $(value);
					if ($val[0] !== $el[0]) {
						data.push($(value).data());
					}
				});
			} else if ($all[0] !== $el[0]) {
				$all.removeClass('tree-selected')
					.find('.glyphicon').removeClass('glyphicon-ok').addClass('fueluxicon-bullet');
				data.push(selData);
			}
			var eventType = 'selected';
			if ($el.hasClass('tree-selected')) {
				eventType = 'deselected';
				$el.removeClass('tree-selected');
				if ($icon.hasClass('glyphicon-ok') || $icon.hasClass('fueluxicon-bullet')) {
					$icon.removeClass('glyphicon-ok').addClass('fueluxicon-bullet');
				}
			} else {
				$el.addClass ('tree-selected');
				if ($icon.hasClass('glyphicon-ok') || $icon.hasClass('fueluxicon-bullet')) {
					$icon.removeClass('fueluxicon-bullet').addClass('glyphicon-ok');
				}
				if (this.options.multiSelect) {
					data.push(selData);
				}
			}
			this.$element.trigger(eventType + '.fu.tree', {
				target: selData,
				selected: data
			});
			$el.trigger('updated.fu.tree', {
				selected: data,
				item: $el,
				eventType: eventType
			});
		},
		openFolder: function openFolder(el, ignoreRedundantOpens) {
			var $el = $(el);
			if (!ignoreRedundantOpens && $el.find('.'+this.options.closeSelector).length && !this.options.ignoreRedundantOpens) {
				this.closeFolder(el);
			}
			var $branch = $el.closest('.tree-branch');
			var $treeFolderContent = $branch.find('.tree-branch-children');
			var $treeFolderContentFirstChild = $treeFolderContent.eq(0);
			$branch.addClass('tree-open');
			$branch.attr('aria-expanded', 'true');
			$treeFolderContentFirstChild.removeClass('hide');
			$branch.find('> .tree-branch-header .'+this.options.openSelector).eq(0)
				.removeClass(this.options.openSelector)
				.addClass(this.options.closeSelector);
			if (!$treeFolderContent.children().length) {
				this.populate($treeFolderContent);
			}
			this.$element.trigger('opened.fu.tree', $branch.data());
		},
		closeFolder: function closeFolder(el) {
			var $el = $(el);
			var $branch = $el.closest('.tree-branch');
			var $treeFolderContent = $branch.find('.tree-branch-children');
			var $treeFolderContentFirstChild = $treeFolderContent.eq(0);
			$branch.removeClass('tree-open');
			$branch.attr('aria-expanded', 'false');
			$treeFolderContentFirstChild.addClass('hide');
			$branch.find('> .tree-branch-header .'+this.options.closeSelector).eq(0)
				.removeClass(this.options.closeSelector)
				.addClass(this.options.openSelector);
			if (!this.options.cacheItems) {
				$treeFolderContentFirstChild.empty();
			}
			this.$element.trigger('closed.fu.tree', $branch.data());
		},
		toggleFolder: function toggleFolder(el) {
			var $el = $(el);
			if ($el.find('.'+this.options.openSelector).length) {
				this.openFolder(el);
			} else if ($el.find('.'+this.options.closeSelector).length) {
				this.closeFolder(el);
			}
		},
		selectFolder: function selectFolder(clickedElement) {
			if (!this.options.folderSelect) return;
			var $clickedElement = $(clickedElement);
			var $clickedBranch = $clickedElement.closest('.tree-branch');
			var $selectedBranch = this.$element.find('.tree-branch.tree-selected');
			var clickedData = $clickedBranch.data();
			var selectedData = [];
			var eventType = 'selected';
			if ($clickedBranch.hasClass('tree-selected')) {
				eventType = 'deselected';
				$clickedBranch.removeClass('tree-selected');
			} else {
				$clickedBranch.addClass('tree-selected');
			}
			if (this.options.multiSelect) {
				$selectedBranch = this.$element.find('.tree-branch.tree-selected');
				$.each($selectedBranch, function (index, value) {
					var $value = $(value);
					if ($value[0] !== $clickedElement[0]) {
						selectedData.push($(value).data());
					}
				});

			} else if ($selectedBranch[0] !== $clickedElement[0]) {
				$selectedBranch.removeClass('tree-selected');
				selectedData.push(clickedData);
			}
			this.$element.trigger(eventType + '.fu.tree', {
				target: clickedData,
				selected: selectedData
			});
			$clickedElement.trigger('updated.fu.tree', {
				selected: selectedData,
				item: $clickedElement,
				eventType: eventType
			});
		},
		selectedItems: function selectedItems() {
			var $sel = this.$element.find('.tree-selected');
			var data = [];
			$.each($sel, function (index, value) {
				data.push($(value).data());
			});
			return data;
		},
		collapse: function collapse() {
			var self = this;
			var reportedClosed = [];
			var closedReported = function closedReported(event, closed) {
				reportedClosed.push(closed);
				if (self.$element.find(".tree-branch.tree-open:not('.hide')").length === 0) {
					self.$element.trigger('closedAll.fu.tree', {
						tree: self.$element,
						reportedClosed: reportedClosed
					});
					self.$element.off('loaded.fu.tree', self.$element, closedReported);
				}
			};
			self.$element.on('closed.fu.tree', closedReported);
			self.$element.find(".tree-branch.tree-open:not('.hide')").each(function () {
				self.closeFolder(this);
			});
		},
		discloseVisible: function discloseVisible() {
			var self = this;
			var $openableFolders = self.$element.find(".tree-branch:not('.tree-open, .hide')");
			var reportedOpened = [];
			var openReported = function openReported(event, opened) {
				reportedOpened.push(opened);
				if (reportedOpened.length === $openableFolders.length) {
					self.$element.trigger('disclosedVisible.fu.tree', {
						tree: self.$element,
						reportedOpened: reportedOpened
					});
					self.$element.off('loaded.fu.tree', self.$element, openReported);
				}
			};
			self.$element.on('loaded.fu.tree', openReported);
			self.$element.find(".tree-branch:not('.tree-open, .hide')").each(function triggerOpen() {
				self.openFolder($(this).find('.tree-branch-header'), true);
			});
		},
		discloseAll: function discloseAll() {
			var self = this;
			if (typeof self.$element.data('disclosures') === 'undefined') {
				self.$element.data('disclosures', 0);
			}
			var isExceededLimit = (self.options.disclosuresUpperLimit >= 1 && self.$element.data('disclosures') >= self.options.disclosuresUpperLimit);
			var isAllDisclosed = self.$element.find(".tree-branch:not('.tree-open, .hide')").length === 0;
			if (!isAllDisclosed) {
				if (isExceededLimit) {
					self.$element.trigger('exceededDisclosuresLimit.fu.tree', {
						tree: self.$element,
						disclosures: self.$element.data('disclosures')
					});
					if (!self.$element.data('ignore-disclosures-limit')) {
						return;
					}
				}
				self.$element.data('disclosures', self.$element.data('disclosures') + 1);
				self.$element.one('disclosedVisible.fu.tree', function () {
					self.discloseAll();
				});
				self.discloseVisible();
			} else {
				self.$element.trigger('disclosedAll.fu.tree', {
					tree: self.$element,
					disclosures: self.$element.data('disclosures')
				});
				if (!self.options.cacheItems) {
					self.$element.one('closeAll.fu.tree', function () {
						self.$element.data('disclosures', 0);
					});
				}
			}
		}
	};
	Tree.prototype.closeAll = Tree.prototype.collapse;
	$.fn.tree = function tree(option) {
		var args = Array.prototype.slice.call(arguments, 1);
		var methodReturn;
		var $set = this.each(function () {
			var $this = $(this);
			var data = $this.data('fu.tree');
			var options = typeof option === 'object' && option;
			if (!data) {
				$this.data('fu.tree', (data = new Tree(this, options)));
			}
			if (typeof option === 'string') {
				methodReturn = data[option].apply(data, args);
			}
		});
		return (methodReturn === undefined) ? $set : methodReturn;
	};
	$.fn.tree.defaults = {
		dataSource: function dataSource(options, callback) {},
		multiSelect: false,
		cacheItems: false,
		folderSelect: false,
		itemSelect: true,
		ignoreRedundantOpens: false,
		disclosuresUpperLimit: 0
	};
	$.fn.tree.Constructor = Tree;
	$.fn.tree.noConflict = function () {
		$.fn.tree = old;
		return this;
	};
}));